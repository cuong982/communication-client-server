version: '3.9'

services:
  websocket_server:
    build:
      context: websocket_server
      dockerfile: Dockerfile.websocket
    container_name: comm_websocket_server
    ports:
      - "8000:8000"
    volumes:
      - ./websocket_server:/app  # Mount the local directory to the container
      - /app/__pycache__/  # Exclude cache to avoid conflicts
    depends_on:
      - rabbitmq
      - redis
      - db
    networks:
      - client-server
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_URL=amqp://root:password@localhost:5672/

  api_server:
    build:
      context: api_server
      dockerfile: Dockerfile.api
    container_name: comm_api_server
    ports:
      - "8001:8001"
    volumes:
      - ./api_server:/app  # Mount the local directory to the container
      - /app/__pycache__/  # Exclude cache to avoid conflicts
    depends_on:
      - redis
      - db
    networks:
      - client-server
    environment:
      - PYTHONUNBUFFERED=1

  message_processor:
    container_name: message_processor
    build:
      context: message_processor
      dockerfile: Dockerfile.processor
    restart: always
    volumes:
      - ./message_processor:/app
    depends_on:
      - rabbitmq
    networks:
      - client-server
    environment:
      - RABBITMQ_URL=amqp://root:password@rabbitmq:5672//

  rabbitmq:
    image: rabbitmq:3.11.11-management
    restart: always
    env_file:
      - .env
    ports:
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - client-server

  redis:
    image: redis:6.2-alpine
    container_name: comm_redis
    ports:
      - "6379:6379"
    networks:
      - client-server

  db:
    image: postgres:14.2-alpine
    container_name: comm_db
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - client-server

  adminer:
    image: adminer
    ports:
      - "5555:8080"
    networks:
      - client-server

  locust:
    build:
      context: test
      dockerfile: Dockerfile.locust
    container_name: locust
    volumes:
      - ./test:/mnt
    command: -f /mnt/locustfile.py --host=http://websocket_server:8000
    ports:
      - "8089:8089"
    networks:
      - client-server
    depends_on:
      - websocket_server

volumes:
  postgres_data:

networks:
  client-server:
    driver: bridge
